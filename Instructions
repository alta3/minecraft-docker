#1 Objective: Learn about Docker while doing something fun. Turn this into a bash script if you want to!

# INSTALL DOCKER
# Take a docker tutorial
# Use "Go" language compiler to create busybox web server
# BUILD A MINECRAFT SERVER CONTAINER using ubuntu
# BUILD A MINECRAFT MAP SERVER CONTAINER using busybox (just so show off how cool this is)
# BUILD A WORKER CONTAINER which delivers minecraft maps to map server using ubuntu

#=================== INSTALL DOCKER ==========================
# Souce: http://docs.docker.io/en/latest/installation/ubuntulinux/

#2 Start with Ubuntu Precise 12.04 (LTS) (64-bit)
#  Therefore, you MUST upgrade the kernel to 3.8
sudo apt-get update
sudo apt-get install linux-image-generic-lts-raring linux-headers-generic-lts-raring

sudo reboot

#3 Add Docker repository key to your local keychain.
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
sudo sh -c "echo deb http://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list"

#4 get docker
sudo apt-get update
sudo apt-get install lxc-docker

#5 VERIFY DOCKER works by downloading the ubuntu image and launching a container.
#  When you run the following command, you will enter a docker "container".
#  Do a list, change directories, etc. Note that everything has changed. You are
#  inside a container, removed from the hosting machine just like a VM. 
sudo docker run -i -t ubuntu /bin/bash

#6 Type exit to EXIT the container.
exit
# ================== DOCKER IS NOW INSTALLED =======================


# ======================DOCKER TUTORIAL=============================
# 7. Goto https://www.docker.io/gettingstarted/ and click "Start!" 
# 8. Continue with Docker file tutorial and at least speed read it
# 9. Repeat the "VERIFY DOCKER" and EXIT (steps 5 and 6).   Just  
#    enter and exit the container until muscle memory takes over. 
# ==================================================================

# ====================== BUSYBOX WEB SERVER ========================
# Based on http://crosbymichael.com/category/docker.html
# which I used as a framework, you need to prepare by
# compiling a file called "server".  Here is why:
# Prior to creating the MINECRAFT Dockerfiles, you must compile
# an http server that will run on busybox. Treat this rabbit hole
# you are about to enter as another learning seesion. You will
# learn how to compile "Go"  programming launguage. This extra effort
# is meant to show you that you can use "busybox" for simple things
# like the minecraft server which is simply serving a png file
# so setting up an apache server for just that is overkill.

#10 Install "Go" language compiler 
sudo apt-get install golang

#11 create a workspace directory and set GOPATH
mkdir $HOME/go
export GOPATH=$HOME/go

#12 For convenience, add the workspace's bin subdirectory to your PATH:
export PATH=$PATH:$GOPATH/bin

#13 add the workspace's bin subdirectory to your PATH:
export PATH=$PATH:$GOPATH/bin

#14 create a corresponding package directory inside your workspace
mkdir -p $GOPATH/src/github.com/user

#15 create your working directory
mkdir $GOPATH/src/github.com/user/server

#16 download server.go from github
cd ~/go/src/github.com/user/server/
https://github.com/crosbymichael/.dotfiles/blob/master/bin/server.go

#17 build and install server.go with the go tool:
cd ~/go/src/github.com/user/server/
go install

#18 The resulting binary you created is here:  ~/go/bin/server
# =====================================================================

# =================== CREATE DOCKERFILES ==============================
#19  You will create this docker folder structure (see step 20)
#     ~/dockerfiles    (created in step 20) 
#        /mapserver    (created in step 20)
#           Dockerfile (created in step 22)
#           server     (created in step 17 copied here step 21)
#        /worker       (created is step 20)
#           Dockerfile (created is step 25)
#        /minecraft    (created is step 20)
#           Dockerfile (created is step 27)


#20 Create directories described in step 19
mkdir ~/dockerfiles
mkdir ~/dockerfiles/mapserver
mkdir ~/dockerfiles/worker
mkdir ~/dockerfiles/minecraft

 #  __  __            _____   _____   ______  _____   
 # |  \/  |    /\    |  __ \ |  __ \ |  ____||  __ \  
 # | \  / |   /  \   | |__) || |__) || |__   | |__) | 
 # | |\/| |  / /\ \  |  ___/ |  ___/ |  __|  |  _  /  
 # | |  | | / ____ \ | |     | |     | |____ | | \ \  
 # |_|  |_|/_/    \_\|_|     |_|     |______||_|  \_\ 

# Mapper is a dumb name, I should have called it "webserver" 
#21 Copy the server file (from line 18) into ~/dockerfiles/mapserver
cp ~/go/bin/server  ~/dockerfiles/mapserver

#22 change directory to "MAPSERVER"
cd ~/dockerfiles/mapserver

# Source: http://crosbymichael.com/category/docker.html

#23 Copy the following text into a file called "Dockerfile"
FROM busybox
ADD mkdir /www
ADD echo "Keep on swimming, keep on swimming, keep on swimming swimming swimming" >> /www/index.html
ADD server server
VOLUME ["/www"]
USER daemon
EXPOSE 8000
# https://github.com/crosbymichael/.dotfiles/blob/master/bin/server.go func main explains the following arguments
ENTRYPOINT ["/server", "-h", "0.0.0.0", "-p", "8000", "-dir", "/www"]


 #__          __ ____   _____   _  __ ______  _____  
 #\ \        / // __ \ |  __ \ | |/ /|  ____||  __ \ 
 # \ \  /\  / /| |  | || |__) || ' / | |__   | |__) |
 #  \ \/  \/ / | |  | ||  _  / |  <  |  __|  |  _  / 
 #   \  /\  /  | |__| || | \ \ | . \ | |____ | | \ \ 
 #    \/  \/    \____/ |_|  \_\|_|\_\|______||_|  \_\

# "Worker" is a dumb name, I should have called it "mapgenerator" 
#24 change directory to "WORKER"
cd ~/dockerfiles/worker

#25 Copies this text into a file called "Dockerfile"
FROM ubuntu
RUN echo "deb http://archive.ubuntu.com/ubuntu precise main universe" > /etc/apt/sources.list
RUN apt-get update
RUN apt-get upgrade -y
RUN echo "deb http://overviewer.org/debian ./" >> /etc/apt/sources.list
RUN apt-get update
RUN apt-get install -y --force-yes minecraft-overviewer wget
ENV VERSION 1.7.4
RUN wget --no-check-certificate https://s3.amazonaws.com/Minecraft.Download/versions/${VERSION}/${VERSION}.jar -P ~/.minecraft/versions/${VERSION}/
ENTRYPOINT ["overviewer.py"]
CMD ["/minecraft/world", "/www"]

 # __  __   _____                                    
 #|  \/  | / ____|                                   
 #| \  / || |                                        
 #| |\/| || |                                        
 #| |  | || |____                                    
 #|_|  |_| \_____| 
#26 change directory to "MINECRAFT"
cd ~/dockerfiles/minecraft

#27 Copy the following text into a file called "Dockerfile"
FROM ubuntu
RUN echo "deb http://archive.ubuntu.com/ubuntu precise main universe" > /etc/apt/sources.list
RUN apt-get update
RUN apt-get upgrade -y
RUN apt-get install -y python-software-properties
RUN add-apt-repository ppa:webupd8team/java -y
RUN apt-get update
RUN echo oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | /usr/bin/debconf-set-selections
RUN apt-get install -y oracle-java7-installer
RUN apt-get install -y wget
RUN mkdir /minecraft
RUN wget -O /minecraft/minecraft.jar  https://s3.amazonaws.com/Minecraft.Download/versions/1.7.4/minecraft_server.1.7.4.jar
RUN chmod +x /minecraft/minecraft.jar
VOLUME ["/minecraft"]
WORKDIR /minecraft
EXPOSE 25565
CMD java -Xmx1024M -Xms1024M -jar minecraft.jar nogui


#28 =================== BUILD the DOCKER IMAGES =======================
#29 Change directory into the mapper folder that contains Dockerfile
cd ~/dockerfiles/worker

#30 Build the mapper container, called mc/mapper. The "." means Dockerfile is in this directory
sudo docker build -t mc/mapper .

#31 Repeat steps 29 and 30 for the worker container
cd ~/dockerfiles/wworker 
sudo docker build -t mc/worker .

#32 Repeat steps 29 and 30 for the minecraft container
cd ~/dockerfiles/minecraft 
sudo docker build -t mc/minecraft .

# =================== VIEW YOUR DOCKER IMAGES ==========================
#33 View your REPOSITORY images: mc/mapper, mc/worker, /mc/minecraft plus images pulled down
sudo docker images

# =================== START YOUR DOCKER CONTAINERS ======================
#34 Start minecraft. Note the MINECRAFT= is tracking the container ID (I think)
MINECRAFT=$(sudo docker run -p 25565:25565 -d -v /minecraft mc/minecraft)

#35 Start your web server that will display the map
MAPPER=$(sudo docker run -p 8000:8000 -d -v /www mc/mapper)

#36 Start the worker that does the map generation. This example shows off shared volumes
sudo docker run -volumes-from $MINECRAFT -volumes-from $MAPPER mc/worker

